from aiogram import types, Dispatcher
from utils.texts import WELCOME_MESSAGE, MAIN_MENU_TEXT
from utils.database import add_user
from datetime import datetime
from utils.config import ADMIN_ID
from keyboards.main_menu import get_main_menu_keyboard

async def start_command(message: types.Message):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_phone = types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    markup.add(button_phone)
    await message.answer(WELCOME_MESSAGE, reply_markup=markup)

async def contact_handler(message: types.Message):
    if message.contact:
        phone = message.contact.phone_number
        await message.answer("‚ú® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ FSM –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

async def name_handler(message: types.Message):
    name = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username or ""
    phone = "unknown"  # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    registration_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    add_user(user_id, username, name, phone, registration_date)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await message.answer(MAIN_MENU_TEXT.format(name=name), reply_markup=get_main_menu_keyboard())

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_command, commands="start", state="*")
    dp.register_message_handler(contact_handler, content_types=types.ContentType.CONTACT, state="*")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ (–ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    dp.register_message_handler(name_handler, lambda message: message.text and not message.text.startswith("/"), state="*")
